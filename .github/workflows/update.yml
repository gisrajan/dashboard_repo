name: ODK Dashboard Pipeline

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch: # Allows you to manually trigger the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    # No need to list ODK secrets in 'env' if directly using secrets.ODK_CENTRAL_XYZ
    # in the 'run' step to create the config file.
    # env:
    #   # Custom secrets if needed
    #   # API_TOKEN: ${{ secrets.API_TOKEN }}
    #   # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Often not needed here, managed by workflow

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4

      - name: Set up Python
        uses: actions/setup-python@v5 # Updated to v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install nbconvert ipykernel jupyter
          # If you have a private repo for utilities, this line is correct:
          # pip install git+https://${{ secrets.GITHUB_TOKEN }}@github.com/myorg/my-secret-utils.git

      - name: Install Jupyter Kernel (User Scope)
        run: |
          # This ensures the kernel is available for nbconvert execution
          python -m ipykernel install --user --name python3 --display-name "Python 3"

      - name: Check available Jupyter kernels
        run: |
          # Useful for debugging if nbconvert struggles to find the kernel
          jupyter kernelspec list

      - name: Create .pyodk_config.toml file from secrets
        run: |
          # Use the exact secret names as stored in GitHub.
          # Assuming you have secrets named ODK_CENTRAL_BASE_URL, ODK_CENTRAL_USERNAME, ODK_CENTRAL_PASSWORD.
          echo '[central]' > .pyodk_config.toml
          echo "base_url = \"${{ secrets.ODK_URL }}\"" >> .pyodk_config.toml
          echo "username = \"${{ secrets.ODK_USERNAME }}\"" >> .pyodk_config.toml
          echo "password = \"${{ secrets.ODK_PASSWORD }}\"" >> .pyodk_config.toml
          
          # Optional: Verify the file content (for debugging, remove for production)
          # The secrets will be redacted in the logs if you 'cat' it.
          # cat .pyodk_config.toml

      - name: Set PYODK_CONFIG_FILE environment variable
        # This makes sure pyodk knows where to find the config file.
        # $(pwd) gets the current working directory in the runner.
        run: echo "PYODK_CONFIG_FILE=$(pwd)/.pyodk_config.toml" >> $GITHUB_ENV


      - name: Execute notebook
        # Executes the notebook and converts it to an HTML dashboard.
        run: |
          jupyter nbconvert --to html --execute --no-input rp_dashboard.ipynb --output index.html

      - name: Commit and push changes
        # Configures Git and pushes the generated HTML dashboard.
        run: |
          git config --global user.name 'github-actions[bot]' # Use bot name for clarity
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add index.html
          git commit -m "Update dashboard [skip ci]" || echo "No changes to commit"
          # Use GITHUB_TOKEN for authentication.
          # If main is a protected branch, ensure "Allow GitHub Actions to create and approve pull requests"
          # or relevant write permissions are enabled for the GITHUB_TOKEN.
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
